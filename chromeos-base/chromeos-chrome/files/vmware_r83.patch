diff --git a/ash/public/cpp/ash_features.cc b/ash/public/cpp/ash_features.cc
index 9e58270812e1..261a710a3246 100644
--- a/ash/public/cpp/ash_features.cc
+++ b/ash/public/cpp/ash_features.cc
@@ -105,7 +105,7 @@ const base::Feature kUnifiedMessageCenterRefactor{
     "UnifiedMessageCenterRefactor", base::FEATURE_ENABLED_BY_DEFAULT};
 
 const base::Feature kEnableBackgroundBlur{"EnableBackgroundBlur",
-                                          base::FEATURE_ENABLED_BY_DEFAULT};
+                                          base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kSwipingFromLeftEdgeToGoBack{
     "SwipingFromLeftEdgeToGoBack", base::FEATURE_ENABLED_BY_DEFAULT};
diff --git a/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc b/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc
index 7955722efa40..57d2e4d6406a 100644
--- a/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc
+++ b/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc
@@ -32,10 +32,13 @@ namespace {
 bool IsGMBAllowed(IntSize size,
                   const CanvasColorParams& color_params,
                   const gpu::Capabilities& caps) {
+  /*
   return gpu::IsImageSizeValidForGpuMemoryBufferFormat(
              gfx::Size(size), color_params.GetBufferFormat()) &&
          gpu::IsImageFromGpuMemoryBufferFormatSupported(
              color_params.GetBufferFormat(), caps);
+         */
+   return false;
 }
 
 }  // namespace
diff --git a/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc b/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc
index d8d6e587a847..62299ad2cee5 100644
--- a/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc
+++ b/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc
@@ -60,8 +60,8 @@ class ClientNativePixmapFactoryDmabuf : public ClientNativePixmapFactory {
       case gfx::BufferUsage::SCANOUT_CAMERA_READ_WRITE:
       case gfx::BufferUsage::CAMERA_AND_CPU_READ_WRITE:
       case gfx::BufferUsage::SCANOUT_VEA_READ_CAMERA_AND_CPU_READ_WRITE:
-        return ClientNativePixmapDmaBuf::ImportFromDmabuf(std::move(handle),
-                                                          size, format);
+      //  return ClientNativePixmapDmaBuf::ImportFromDmabuf(std::move(handle),
+      //                                                    size, format);
       case gfx::BufferUsage::GPU_READ:
       case gfx::BufferUsage::SCANOUT:
       case gfx::BufferUsage::SCANOUT_VDA_WRITE:
